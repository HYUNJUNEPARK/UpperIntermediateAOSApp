package com.june.myapplication

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.databinding.DataBindingUtil
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import com.google.android.gms.tasks.CancellationTokenSource
import com.june.myapplication.databinding.ActivityMainBinding
import com.june.myapplication.models.airquality.Grade
import com.june.myapplication.models.airquality.MeasuredValue
import com.june.myapplication.models.monitoringstation.MonitoringStation
import com.june.myapplication.retrofit.Repository
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private lateinit var fusedLocationProviderClient: FusedLocationProviderClient
    private var cancellationTokenSource: CancellationTokenSource? = null
    private val scope = MainScope()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)
        binding.refresh.setOnRefreshListener {
            fetchAirQualityData()
        }

        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
        Permission.requestLocationPermissions(this)
    }

    override fun onDestroy() {
        super.onDestroy()

        cancellationTokenSource?.cancel()
        scope.cancel()
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        /* ACCESS_COARSE_LOCATION : ÎèÑÏãú Block Îã®ÏúÑÏùò Ï†ïÎ∞ÄÎèÑÏùò ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏñªÏùÑ Ïàò ÏûàÏùå
           ACCESS_FINE_LOCATION   : ACCESS_COARSE_LOCATION Î≥¥Îã§ Îçî Ï†ïÎ∞ÄÌïú ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏñªÏùÑ Ïàò ÏûàÏùå */
        val isLocationPermissionGranted: Boolean =
            ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED &&
            ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            //1. ÏúÑÏπò Ï†ïÎ≥¥ Í∂åÌïúÏù¥ ÏóÜÎäî Í≤ΩÏö∞
            if (!isLocationPermissionGranted) {
                finish()
            }
            //2. ÏúÑÏßÄ Ï†ïÎ≥¥ Í∂åÌïúÏù¥ ÏûàÎäî Í≤ΩÏö∞
            else {
                val isBackgroundLocationPermissionGranted: Boolean =
                    ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) == PackageManager.PERMISSION_GRANTED

                /* shouldShowBackgroundPermissionRationale(permission: String)
                   ÏÇ¨Ïö©ÏûêÍ∞Ä Í∂åÌïúÏùÑ Ï≤òÏùå Î≥∏ Í≤ΩÏö∞, Îã§Ïãú Î¨ªÏßÄ ÏïäÏùåÏùÑ ÏÑ†ÌÉùÌïú Í≤ΩÏö∞, Í∂åÌïúÏùÑ ÌóàÏö©Ìïú Í≤ΩÏö∞ false Î∞òÌôò
                   ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥Ï†ÑÏóê Í∂åÌïú ÏöîÏ≤≠ÏùÑ Í±∞Î∂ÄÌïú Í≤ΩÏö∞ true Î•º Î∞òÌôò
                   Ïï±ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ Í∂åÌïúÏù¥ ÌïÑÏöîÌï®ÏùÑ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ†§Ï£ºÎäî ÏïàÎÇ¥Î•º Ï∂îÍ∞ÄÌï® */
                val shouldShowBackgroundPermissionRationale: Boolean =
                    shouldShowRequestPermissionRationale(Manifest.permission.ACCESS_BACKGROUND_LOCATION)

                //2.1. ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥Ï†ÑÏóê Í∂åÌïúÏùÑ Í±∞Î∂ÄÌïú Í≤ΩÏö∞
                if (!isBackgroundLocationPermissionGranted && shouldShowBackgroundPermissionRationale) {
                    Permission.showBackgroundLocationPermissionRationaleDialog(this, fetchAirQualityData())
                }
                //2.2. Í∂åÌïúÏù¥ ÏûàÎäî Í≤ΩÏö∞
                else {
                    fetchAirQualityData()
                }
            }
        //AOS R ÎØ∏Îßå ÎîîÎ∞îÏù¥Ïä§ Í∂åÌïú ÏöîÏ≤≠
        }
        else {
            //ÏúÑÏπò Ï†ïÎ≥¥ Í∂åÌïúÏù¥ ÏóÜÎäî Í≤ΩÏö∞
            if (!isLocationPermissionGranted) {
                finish()
            }
            //ÏúÑÏßÄ Ï†ïÎ≥¥ Í∂åÌïúÏù¥ ÏûàÎäî Í≤ΩÏö∞
            else {
                fetchAirQualityData()
            }
        }
    }

    /*
      FusedLocationProviderClient
      https://developers.google.com/android/reference/com/google/android/gms/location

      1. Build :
      implementation 'com.google.android.gms:play-services-location:20.0.0

      2. ÏÑ§Î™Ö
      -LocationManager Î≥¥Îã§ ÏÇ¨Ïö©Ïù¥ Í∂åÏû•Îê®
      -Google Play services Location ÏóêÏÑú ÏúÑÏπòÏ†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Í∏∞ ÎïåÎ¨∏Ïóê ÏôÑÏÑ±ÎèÑÎ•º ÎÜíÌûàÍ∏∞ ÏúÑÌï¥ÏÑúÎäî
      Ïï±Ïóê Google Play services Í∞Ä ÏûàÎäî ÏßÄ ÌôïÏù∏ÌïòÎäî Í∏∞Îä•Ïù¥ ÌïÑÏöîÌï® (Í∏∞Í∏∞ ÌôòÍ≤ΩÏóê Îî∞ÎùºÏÑú Ìï¥Îãπ Ïï±Ïù¥ ÏïàÍπîÎ†§ ÏûàÎäî Í≤ΩÏö∞Í∞Ä ÏûàÏùå)
      2.1. getLastLocation()
      -ÏúÑÏπò Ï∂îÏ†ïÏπòÎ•º Îçî Îπ†Î•¥Í≤å Í∞ÄÏ†∏Ïò§Í≥† Ïï±ÏóêÏÑú ÎπÑÎ°ØÎê† Ïàò ÏûàÎäî Î∞∞ÌÑ∞Î¶¨ ÏÇ¨Ïö©ÎüâÏùÑ ÏµúÏÜåÌôî
      -Í∑∏Îü¨ÎÇò ÏµúÍ∑ºÏóê Îã§Î•∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú ÏúÑÏπòÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏµúÏã†Ïù¥ ÏïÑÎãê Ïàò ÏûàÏùå
      2.2. getCurrentLocation()
      -ÏµúÏã† ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò§Îäî Îç∞ Í∂åÏû•ÎêòÎäî Î∞©Î≤ïÏúºÎ°ú Îçî ÏµúÏã† ÏÉÅÌÉúÏù¥Í≥† Ï†ïÌôïÌïú ÏúÑÏπòÎ•º Îçî ÏùºÍ¥ÄÎêòÍ≤å Í∞ÄÏ†∏Ïò¥
      -Í∑∏Îü¨ÎÇò Ïù¥ Î©îÏÑúÎìúÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Í∏∞Í∏∞ÏóêÏÑú ÌôúÏÑ± ÏúÑÏπò Í≥ÑÏÇ∞Ïù¥ Î∞úÏÉùÌï† Ïàò ÏûàÏùå
     */

    //ÎîîÎ∞îÏù¥Ïä§ ÏúÑÏπòÏ†ïÎ≥¥Î°ú Í∞ÄÍπåÏö¥ Ï∏°Ï†ïÏÜåÎ•º Ï∞æÏùå
    @SuppressLint("MissingPermission")
    private fun fetchAirQualityData() {
        cancellationTokenSource = CancellationTokenSource()
        fusedLocationProviderClient
            .getCurrentLocation(
                Priority.PRIORITY_HIGH_ACCURACY,
                cancellationTokenSource!!.token
            )
            .addOnSuccessListener { location ->
                scope.launch {
                    try {
                        binding.errorDescriptionTextView.visibility = View.GONE
                        val monitoringStation =
                            Repository.getNearbyMonitoringStation(location.latitude, location.longitude)
                        val measuredValue =
                            Repository.getLatestAirQualityData((monitoringStation!!.stationName!!))
                        displayAirQualityData(monitoringStation, measuredValue!!)
                    }
                    catch (e: Exception) {
                        binding.contentsLayout.alpha = 0F
                        binding.errorDescriptionTextView.visibility = View.VISIBLE
                    }
                    finally {
                        binding.progressBar.visibility = View.GONE
                        binding.refresh.isRefreshing = false
                    }
                }
            }
            //ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏπò Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌïú Í≤ΩÏö∞
            .addOnFailureListener { e ->
                e.printStackTrace()
            }
    }

    /**
     * ÌååÎùºÎØ∏ÌÑ∞Î°ú Î∞õÏùÄ ÏúÑÏπò Ï†ïÎ≥¥ÏôÄ ÎåÄÍ∏∞ Ï†ïÎ≥¥Î•º UI ÏÑ∏ÌåÖ
     *
     * @param monitoringStation Ï∏°Ï†ïÏÜå ÏúÑÏπò
     * ```
     * MonitoringStation(
     *      addr=ÏÑúÏö∏ ÏòÅÎì±Ìè¨Íµ¨ ÏòÅÏ§ëÎ°ú 37(ÏòÅÎì±Ìè¨ÏãúÏû•ÏÇ¨Í±∞Î¶¨),
     *      stationName=ÏòÅÎì±Ìè¨Î°ú,
     *      tm=1.6
     * )
     * ```
     * @param measuredValue Ï∏°Ï†ïÎêú Îç∞Ïù¥ÌÑ∞ Î¶¨Ïä§Ìä∏
     * ```
     * MeasuredValue(coFlag=null, coGrade=Ï¢ãÏùå üòÜ, coValue=0.3, dataTime=2022-09-06 08:00,
     *      khaiGrade=null, khaiValue=-, mangName=ÎèÑÎ°úÎ≥ÄÎåÄÍ∏∞,
     *      no2Flag=null, no2Grade=Ï¢ãÏùå üòÜ, no2Value=0.020,
     *      o3Flag=null, o3Grade=Î≥¥ÌÜµ üôÇ, o3Value=0.040,
     *      pm10Flag=ÏûêÎ£åÏù¥ÏÉÅ, pm10Grade=null, pm10Grade1h=null, pm10Value=-, pm10Value24=-,
     *      pm25Flag=ÏûêÎ£åÏù¥ÏÉÅ, pm25Grade=null, pm25Grade1h=null, pm25Value=-, pm25Value24=-,
     *      so2Flag=null, so2Grade=Ï¢ãÏùå üòÜ, so2Value=0.002
     * )
     * ```
     */
    @SuppressLint("SetTextI18n")
    fun displayAirQualityData(monitoringStation: MonitoringStation, measuredValue: MeasuredValue) = with(binding) {
        contentsLayout.animate()
            .alpha(1F)
            .start()
        dateTimeTextView.text = "Ï∏°Ï†ï ÏãúÍ∞Ñ : ${measuredValue.dataTime ?: "-"}"
        measuringStationNameTextView.text = monitoringStation.stationName
        measuringStationAddressTextView.text = "Ï∏°Ï†ïÏÜå ÏúÑÏπò: ${monitoringStation.addr}"

        /* Ï∏°Ï†ï ÏãúÍ∞ÑÏóê Îî∞ÎùºÏÑú khaiGrade(ÌÜµÌï©ÎåÄÍ∏∞ÌôòÍ≤ΩÏßÄÏàò), khaiValue(ÌÜµÌï©ÎåÄÍ∏∞ÌôòÍ≤ΩÏàòÏπò) Í∞Ä ÏóÜÎäî item Ïù¥ ÏûàÏùÑ Ïàò ÏûàÏùå
           Ïù¥Îü∞ Îç∞Ïù¥ÌÑ∞Îäî null Ïù¥Í∏∞ ÎïåÎ¨∏Ïóê Ïù¥Î•º unknown ÏúºÎ°ú Î≥ÄÌôòÌïòÎäî ÏûëÏóÖ */
        (measuredValue.khaiGrade ?: Grade.UNKNOWN).let { grade ->
            root.setBackgroundResource(grade.colorResId)
            totalGradeLabelTextView.text = grade.label
            totalGradleEmojiTextView.text = grade.emoji
        }

        with(measuredValue) {
            fineDustInformationTextView.text =
                "ÎØ∏ÏÑ∏Î®ºÏßÄ: $pm10Value „éç/„é• ${(pm10Grade ?: Grade.UNKNOWN).emoji}"
            ultraFineDustInformationTextView.text =
                "Ï¥àÎØ∏ÏÑ∏Î®ºÏßÄ: $pm25Value „éç/„é• ${(pm25Grade ?: Grade.UNKNOWN).emoji}"

            with(so2Item) {
                labelTextView.text = "ÏïÑÌô©ÏÇ∞Í∞ÄÏä§"
                gradeTextView.text = (so2Grade ?: Grade.UNKNOWN).toString()
                valueTextView.text = "$so2Value ppm"
            }

            with(coItem) {
                labelTextView.text = "ÏùºÏÇ∞ÌôîÌÉÑÏÜå"
                gradeTextView.text = (coGrade ?: Grade.UNKNOWN).toString()
                valueTextView.text = "$coValue ppm"
            }

            with(o3Item) {
                labelTextView.text = "Ïò§Ï°¥"
                gradeTextView.text = (o3Grade ?: Grade.UNKNOWN).toString()
                valueTextView.text = "$o3Value ppm"
            }

            with(no2Item) {
                labelTextView.text = "Ïù¥ÏÇ∞ÌôîÏßàÏÜå"
                gradeTextView.text = (no2Grade ?: Grade.UNKNOWN).toString()
                valueTextView.text = "$no2Value ppm"
            }
        }
    }
}